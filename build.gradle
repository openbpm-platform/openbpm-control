/*
 * Copyright (c) Haulmont 2024. All Rights Reserved.
 * Use is subject to license terms.
 */
import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort

import org.springframework.boot.gradle.tasks.buildinfo.BuildInfo

plugins {
    id 'io.jmix' version '2.6.1'
    id 'java'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'
    id 'com.github.spotbugs' version '6.1.7'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.vaadin'

jmix {
    bomVersion = '2.6.1'
}

group = 'io.openbpm'
version = '1.0.999-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://global.repo.jmix.io/repository/public'
    }
    maven {
        url 'https://maven.vaadin.com/vaadin-addons'
    }

    if (project.hasProperty('openbpmRepoUrl')) {
        maven {
            url = rootProject['openbpmRepoUrl']
            credentials {
                username rootProject['openbpmRepoUser']
                password rootProject['openbpmRepoPassword']
            }
            allowInsecureProtocol = true
        }
    } else {
        maven {
            url 'https://nexus.openbpm.io/repository/public'
        }
    }
}

dependencies {
    // OpenBPM
    implementation(platform("io.openbpm.bom:openbpm-bom:$bomVersion"))
    implementation 'io.openbpm.ui:openbpm-theme'
    implementation 'io.openbpm.ui:openbpm-ui-kit-starter'

    // Jmix
    implementation 'io.jmix.core:jmix-core-starter'
    implementation 'io.jmix.gridexport:jmix-gridexport-flowui-starter'
    implementation 'io.jmix.data:jmix-eclipselink-starter'
    implementation 'io.jmix.security:jmix-security-starter'
    implementation 'io.jmix.security:jmix-security-flowui-starter'
    implementation 'io.jmix.security:jmix-security-data-starter'
    implementation 'io.jmix.localfs:jmix-localfs-starter'
    implementation 'io.jmix.flowui:jmix-flowui-starter'
    implementation 'io.jmix.flowui:jmix-flowui-data-starter'
    implementation 'io.jmix.flowui:jmix-flowui-themes'
    implementation 'io.jmix.datatools:jmix-datatools-starter'
    implementation 'io.jmix.datatools:jmix-datatools-flowui-starter'
    implementation 'io.jmix.charts:jmix-charts-flowui-starter'
    implementation 'io.jmix.translations:jmix-translations-de'
    implementation 'io.jmix.translations:jmix-translations-es'
    implementation 'io.jmix.translations:jmix-translations-ru'

    //Vaadin add-ons
    implementation "org.vaadin.addons.componentfactory:spinner"

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.cloud:spring-cloud-dependencies"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Camunda
    implementation "org.camunda.community.rest:camunda-platform-7-rest-client-spring-boot"
    implementation "io.holunda.camunda-api:camunda-bpm-engine-api"

    // Camunda util dependencies
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    // Preprocessors
    implementation "org.mapstruct:mapstruct:"
    implementation "org.projectlombok:lombok"

    annotationProcessor platform("io.openbpm.bom:openbpm-bom:$bomVersion")
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.mapstruct:mapstruct-processor"

    // Database drivers
    runtimeOnly 'org.postgresql:postgresql'

    // test: Spring
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // test: Jmix
    testImplementation 'io.jmix.flowui:jmix-flowui-test-assist'

    // test: processors
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor platform("io.openbpm.bom:openbpm-bom:$bomVersion")
    testAnnotationProcessor "org.projectlombok:lombok"

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

configurations.implementation {
    exclude group: 'com.vaadin', module: 'hilla'
    exclude group: 'com.vaadin', module: 'hilla-dev'
}

test {
    useJUnitPlatform()
    systemProperties(System.getProperties())
}

idea {
    module {
        excludeDirs.addAll(files '.jmix', 'node_modules', 'src/main/frontend/generated/', 'src/main/bundles')
    }
}

vaadin {
    optimizeBundle = false
}

project.afterEvaluate {
    def bootBuildInfoTask = (BuildInfo) tasks.named('bootBuildInfo').orNull //Jmix plugin adds this task
    if (bootBuildInfoTask != null) {
        bootBuildInfoTask.properties({
            additional = [
                    'buildType': project.findProperty('buildType') ?: 'sources'
            ]
        })
    }
}

spotbugs {
    ignoreFailures = false
    omitVisitors = ['FindDoubleCheck']
    excludeFilter = project.file('./etc/spotbugs/spotbugs-exclude-filter.xml')
    effort = Effort.valueOf('MAX')
    reportLevel = Confidence.valueOf('MEDIUM')
}

spotbugsMain {
    jvmArgs = ['-Xmx1024m']

    reports {
        xml.required = false

        html {
            required = true
            stylesheet = 'fancy-hist.xsl'
            destination layout.buildDirectory.file("reports/spotbugs/${project.name}.html").get().asFile
        }
    }

    onlyIf {
        project.hasProperty('spotbugsEnabled')
    }
}

spotbugsTest {
    jvmArgs = ['-Xmx1024m']

    reports {
        xml.required = false
        html {
            required = true
            stylesheet = 'fancy-hist.xsl'
            destination layout.buildDirectory.file("reports/spotbugs/test-${project.name}.html").get().asFile
        }
    }

    onlyIf {
        project.hasProperty('spotbugsEnabled')
    }
}
